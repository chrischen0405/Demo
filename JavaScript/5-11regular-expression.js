// i ignore case 忽略大小写
// g global 全局匹配
// m multiline 多行匹配
// [abc] 查找方括号之间的任何字符
// [0-9] 查找任何从0至9的数字
// (x|y) 查找任何以|分隔的选项

// 元字符
// \w === [0-9A-z_]
// \W === [^\w]
// \d === [0-9]
// \D === [^\d]
// \r 回车 \n 换行 \t 制表符 \v 垂直制表符 \f 换页符
// \s === [\r\n\t\v\f]
// \S === [^\s]
// \b 单词边界
// \B 非单词边界
// .匹配除了回车和换行的所有字符
// n+ {1,正无穷}
// n* {0,正无穷}
// n? {0,1}
// ^n 匹配任何以n开头的字符串
// n$ 匹配任何以n结尾的字符串
// ?=n 匹配任何其后紧接指定字符串n的字符串
// ?!n 匹配任何其后没有紧接指定字符串n的字符串
// /(\w)\1/ \1 反向引用第一个子表达式

let str, reg, res

str = '1000000000'
// 千分位加逗号
reg = /(?=(\B)(\d{3})+$)/g
res = str.replace(reg, ',')
console.log(str, res)

str = 'aA$123'
// 密码校验 6位以上包含大小写数字特殊字符
reg = /^(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[~!@#$%^&*,?\.])[0-9a-zA-Z~!@#$%^&*,?\.]{6,}$/
console.log(str, reg.test(str))

str = 'chrischen0405@gmail.com'
// 邮箱校验
reg = /^([A-z0-9_-])+\@([A-z0-9_\-\.]+\.([A-z]{2,4}))$/
console.log(str, reg.test(str))
